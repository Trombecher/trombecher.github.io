
## The Story Behind My Web Experience

Behind Aena was the motivation of a React alternative. This was mid 2023. I started learning Svelte and I really liked it; then I got into Vue, didn't like it as much. And then came the NextJS hype: the app router.

So I tried NextJS and realized I had to learn React. The file router of NextJS was very intuitive, but I could not wrap my mind around the React model. 2023 me was stuck implementing a basic to-do app in React with NextJS, wondering why my whole app re-rendered when I just wanted to change a single item's name in the list.

At that time I blamed the immutable data paradigm for this behaviour – and I still do – so I thought: _why not make a framework that is more efficient by mutating state, instead of cloning, mutating and then assigning?_

Aena is the result of this thought. Of course the journey began way before November 2023 ([my first commit on GitHub](https://github.com/Trombecher/aena/commit/384b5b002bd68cae6fbe7cb4bc8a349e96a882b8)), including accidentally deleting the project TWICE and then rewriting it. Even the repo contains at least two rewrites.

But on the other hand I was fascinated by the DX NextJS gives. The fact that the gap between frontend and backend has been made invisible means so much for the entire web ecosystem.

---

Then I started thinking about a portfolio and learning about static server outputs (to host efficiently). There I pivoted away from Next because I saw the immense React runtime bundles of >60kb (after gzip), which I wasn't actively using by the way. And since I already had a bad experience using React for interactivity (for SSG it was fine because it was effectively just HTML) I opted for other options, eventually converging against Astro.

But one thing I brought with me from Next: TailwindCSS. Because when I started using Next, it was activated by default (or I was curious and selected it during project creation, anyway does not matter), I got to really liking it. It just made CSS unbelievably simple. At first, I hesitated a bit because I was worried about bundle size, but then I actually looked at some bundle comparisons and was hooked.

So now, freshly into Astro and having the Tailwind experience, I tried to build my (perfect) portfolio website. It took a few attempts and some design decisions, but that's where we're at now: this website.

Did I forget SolidJS? Yeah, this website uses the SolidJS integration for Astro. The whole time I was hyped for Solid because it seemed like it somehow solved the initial problems I had with React:

* Bundle size
* Reactivity
* Performance

I still needed to understand its syntax, but the learning curve was much steeper. And just one word about React (that holds as well for C): **React makes it easy to create new things fast, but it makes it incredibly easy to shoot yourself into the foot**. Ok, no more criticism against React.

When I prepared for the rewrite of the predecessor of this version of my website, [SolidStart](https://start.solidjs.com/) just came out and I was hyped. But a few hours of using it proved that it was not production ready at all, because it kept crashing and since this blog is using MDX, no one had implemented MDX support. That was the deal-breaker.

But since the predecessor was using Astro + Tailwind (+ Aena), I decided to rewrite the website using the same stack, but swapping my framework with Solid. Solid has a great integration with Astro and my framework was honestly running on hopes and dreams.

### Here an Example

To write a game (a mini SPA in my website), I had to first write the blog post (.mdx). Then I had to create an Astro component (.astro) that I then imported into my MDX. After that I had to create a TypeScript (.tsx) file, containing my app code, and then I had to mount my app in the astro component using a script tag.

This script tag was only included once on the page (no matter how many times I included the Astro component), since Astro only allowed TypeScript for global scripts, and they behave in this way, period.

To set up TSX I had to configure some things; it was not that much since nowadays, everything is just using Vite under the hood, and they expose vite configuration options.

### Now Using Solid

Using solid eliminated the need for an intermediate Astro component and made it possible to include separate instances of the component on the same page. Furthermore, it introduced server-side rendering and client side hydration, things I had to do myself using ids and `document.querySelector`s. It was tedious.

### Fine Grained Control

Another thing about Next that I really like is that this the framework you _should be using to build big production apps_.